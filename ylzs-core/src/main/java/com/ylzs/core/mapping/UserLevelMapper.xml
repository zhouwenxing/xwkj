<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ylzs.core.mapper.UserLevelMapper" >
  <resultMap id="BaseResultMap" type="com.ylzs.core.model.UserLevel" >
    <id column="id" property="id" jdbcType="VARCHAR" />
    <result column="level" property="level" jdbcType="INTEGER" />
    <result column="level_value" property="levelValue" jdbcType="VARCHAR" />
    <result column="level_describe" property="levelDescribe" jdbcType="VARCHAR" />
    <result column="altitude_from" property="altitudeFrom" jdbcType="INTEGER" />
    <result column="altitude_to" property="altitudeTo" jdbcType="INTEGER" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, level, level_value, level_describe, altitude_from, altitude_to, remark
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from ylzs_user_level
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from ylzs_user_level
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.ylzs.core.model.UserLevel" >
    insert into ylzs_user_level (id, level, level_value, 
      level_describe, altitude_from, altitude_to, 
      remark)
    values (#{id,jdbcType=VARCHAR}, #{level,jdbcType=INTEGER}, #{levelValue,jdbcType=VARCHAR}, 
      #{levelDescribe,jdbcType=VARCHAR}, #{altitudeFrom,jdbcType=INTEGER}, #{altitudeTo,jdbcType=INTEGER}, 
      #{remark,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.ylzs.core.model.UserLevel" >
    insert into ylzs_user_level
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="level != null" >
        level,
      </if>
      <if test="levelValue != null" >
        level_value,
      </if>
      <if test="levelDescribe != null" >
        level_describe,
      </if>
      <if test="altitudeFrom != null" >
        altitude_from,
      </if>
      <if test="altitudeTo != null" >
        altitude_to,
      </if>
      <if test="remark != null" >
        remark,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="level != null" >
        #{level,jdbcType=INTEGER},
      </if>
      <if test="levelValue != null" >
        #{levelValue,jdbcType=VARCHAR},
      </if>
      <if test="levelDescribe != null" >
        #{levelDescribe,jdbcType=VARCHAR},
      </if>
      <if test="altitudeFrom != null" >
        #{altitudeFrom,jdbcType=INTEGER},
      </if>
      <if test="altitudeTo != null" >
        #{altitudeTo,jdbcType=INTEGER},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.ylzs.core.model.UserLevel" >
    update ylzs_user_level
    <set >
      <if test="level != null" >
        level = #{level,jdbcType=INTEGER},
      </if>
      <if test="levelValue != null" >
        level_value = #{levelValue,jdbcType=VARCHAR},
      </if>
      <if test="levelDescribe != null" >
        level_describe = #{levelDescribe,jdbcType=VARCHAR},
      </if>
      <if test="altitudeFrom != null" >
        altitude_from = #{altitudeFrom,jdbcType=INTEGER},
      </if>
      <if test="altitudeTo != null" >
        altitude_to = #{altitudeTo,jdbcType=INTEGER},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ylzs.core.model.UserLevel" >
    update ylzs_user_level
    set level = #{level,jdbcType=INTEGER},
      level_value = #{levelValue,jdbcType=VARCHAR},
      level_describe = #{levelDescribe,jdbcType=VARCHAR},
      altitude_from = #{altitudeFrom,jdbcType=INTEGER},
      altitude_to = #{altitudeTo,jdbcType=INTEGER},
      remark = #{remark,jdbcType=VARCHAR}
    where id = #{id,jdbcType=VARCHAR}
  </update>
</mapper>